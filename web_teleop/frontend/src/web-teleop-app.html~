<!-- IMPORTS
     Here is where you import the elements used in this file, similar to imports in other programming languages.
-->
<link rel="import" href="../bower_components/polymer/polymer-element.html">
<link rel="import" href="../bower_components/ros-websocket/ros-websocket.html">
<link rel="import" href="../bower_components/ros-topic/ros-topic.html">
<link rel="import" href="../bower_components/ros-service/ros-service.html">
<link rel="import" href="../bower_components/paper-button/paper-button.html">    
<link rel="import" href="../bower_components/paper-slider/paper-slider.html">
<link rel="import" href="../bower_components/iron-flex-layout/iron-flex-layout-classes.html">


<dom-module id="web-teleop-app">
  <template>
    <style is="custom-style" include="iron-flex"></style>
    <style>
      <!-- CSS STYLE RULES
           CSS style rules you add here only affect the HTML defined in this file.
           If you are interested in more advanced techniques like sharing styles across elements, ask the course staff.
      -->
      :host {
        display: block;
      }
      paper-slider {                                                             
        --paper-slider-input: {                                                  
          width: 100px;                                                          
        }                                                                        
      }                                                                          
      paper-button {                                                             
        background-color: #eee;
        user-select: none;                                 
      }

      #driving {
        display: inline-block;
      }

      #camera img {
        width: 100%
        height: auto;
      }
    </style>
    <!-- HTML TEMPLATE
         Here is where you add the HTML for your element.
         There is special syntax for binding JavaScript variables in your template.
    -->
    <ros-websocket auto ros="{{ros}}"
      url="{{url}}"
      on-connection="_handleConnection"
      on-close="_handleClose"
      on-error="_handleError"></ros-websocket>

    <ros-topic auto
      ros="{{ros}}"
      topic="joint_state_republisher/torso_lift_joint"
      msg-type="std_msgs/Float64"
      last-message="{{torsoHeight}}"
      on-message="_handleTorsoHeight"
    ></ros-topic>

    <ros-service                                                                 
      id="torsoService"
      on-response="_handleTorsoSuccess"
      on-fail="_handleTorsoError"
      name="/web_teleop/set_torso"
      ros="{{ros}}"
      service-type="web_teleop/SetTorso"
    ></ros-service>

    <ros-topic
      id="baseTopic"
      ros="{{ros}}"
      topic="cmd_vel"
      msg-type="geometry_msgs/Twist"
    ></ros-topic>

    <ros-service                                                                 
      id="headService"
      on-response="_handleHeadSuccess"
      on-fail="_handleTorsoError"
      name="/web_teleop/set_head"
      ros="{{ros}}"
      service-type="web_teleop/SetHead"
    ></ros-service>

    <ros-service                                                                 
      id="gripperService"
      on-response="_handleGripperSuccess"
      on-fail="_handleTorsoError"
      name="/web_teleop/set_gripper"
      ros="{{ros}}"
      service-type="web_teleop/SetGripper"
    ></ros-service>

    <ros-service                                                                 
      id="armService"
      on-response="_handleArmSuccess"
      on-fail="_handleTorsoError"
      name="/web_teleop/set_arm"
      ros="{{ros}}"
      service-type="web_teleop/SetArm"
    ></ros-service>

    <h1>Fetch teleop</h1>
    [[status]]

    <div id="camera">
      <img src="//[[hostname]]:8000/stream?topic=/head_camera/rgb/image_raw"></img>
    </div>
	
    <h2>Torso</h2>
    <div>
      Torso height: [[_round(torsoHeight.data, 0.001)]] meters
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="0" max="0.4" step="0.01" editable                       
        value="{{desiredTorsoHeight}}"></paper-slider>                           
      <paper-button on-tap="_setTorso">Set torso</paper-button>                               
    </div>

    <div id="driving" class="layout vertical">
      <div class="layout horizontal">
        <div class="flex"></div>
        <paper-button
          on-down="_startForward"
          on-up="_endBaseCommand"
        >Forward</paper-button>
        <div class="flex"></div>
      </div>
      <div class="layout horizontal">
        <paper-button
          on-down="_startLeft"
          on-up="_endBaseCommand"
        >Left</paper-button>
        <paper-button
          on-down="_startBack"
          on-up="_endBaseCommand"
        >Back</paper-button>
        <paper-button
          on-down="_startRight"
          on-up="_endBaseCommand"
        >Right</paper-button>
      </div>
    </div>
	
    <h2>Gripper</h2>
    <div id="driving" class="layout vertical">   
      <div class="layout horizontal">
        <paper-button on-tap="_setOpen">Open</paper-button>
        <paper-button on-tap="_setClose">Close</paper-button>
      </div>

    <h2>Head</h2>
    <div>
      Head tilt: [[_round(headTilt.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-90" max="45" step="0.5" editable                       
        value="{{desiredHeadTilt}}"></paper-slider> 
    </div>
    <div>
      Head pan: [[_round(headPan.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-90" max="90" step="1" editable                       
        value="{{desiredHeadPan}}"></paper-slider>                                                         
    </div>
    <div>
    <paper-button on-tap="_setHead">Set tilt and pan angles</paper-button>                               
    </div>
    
    <h2>Arm</h2>
    <div>
      Shoulder pan: [[_round(shoulderPan.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-92" max="92" step="0.01" editable                       
        value="{{desiredShoulderPan}}"></paper-slider> 
    </div>
    <div>
      Shoulder lift: [[_round(shoulderLift.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-70" max="87" step="1" editable                       
        value="{{desiredShoulderLift}}"></paper-slider>                                                         
    </div>
    <div>
      Upperarm roll: [[_round(upperarmRoll.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-180" max="180" step="2" editable                       
        value="{{desiredUpperarmRoll}}"></paper-slider>                                                         
    </div>
    <div>
      Elbow flex: [[_round(elbowFlex.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-129" max="129" step="0.01" editable                       
        value="{{desiredElbowFlex}"></paper-slider>                                                         
    </div>
    <div>
      Forearm roll: [[_round(forearmRoll.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-180" max="180" step="2" editable                       
        value="{{desiredForearmRoll}}"></paper-slider>                                                         
    </div>
    <div>
      Wrist flex: [[_round(wristFlex.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-125" max="125" step="0.01" editable                       
        value="{{desiredWristFlex}"></paper-slider>                                                         
    </div>
    <div>
      Wrist roll: [[_round(wristRoll.data, 0.001)]] degree
    </div>
    <div class="layout horizontal center">                                       
      <paper-slider min="-180" max="180" step="2" editable                       
        value="{{desiredWristRoll}"></paper-slider>                                                         
    </div>
    <div>
    <paper-button on-tap="_setArmJoints">Set arm joints</paper-button>                               
    </div>
	    
  </template>
  <script>
    /*
      JAVASCRIPT SECTION
      Here is where you add the code that controls the behavior of the element.
    */
    
    class WebTeleopApp extends Polymer.Element {
      static get is() { return 'web-teleop-app'; }
      // List properties here, which we will not use in this lab.
      static get properties() {
        return {
        };
      }
      _handleConnection() {
        this.status = 'Connected to the websocket server.';
        //console.log(this.status);
      }
      _handleClose() {
        this.status = 'Closed connection to the websocket server.';
        //console.log(this.status);
      }
      _handleError() {
        this.status = 'Error connecting to the websocket server.';
        //console.log(this.status);
      }  
      _handleTorsoHeight(evt) {
	var msg = evt.detail;
	//console.log(msg);
      }
      _round(val, precision) {                                                   
        return Math.round(val/precision) * precision;                            
      }
      _setTorso() {
        this.status = 'Setting torso to ' + this.desiredTorsoHeight + ' meters...';
        this.$.torsoService.call({height: this.desiredTorsoHeight});
      }
      _handleTorsoSuccess() {
        this.status = 'Set torso to ' + this.desiredTorsoHeight + ' meters.';
      }
      _handleTorsoError(evt) {
        this.status = 'Error: ' + evt.detail;
      }

      _startForward(evt) {
        evt.preventDefault(); // Prevent right-click menu from showing up after long press on mobile
        this.status = 'Driving forward...';
        var baseTopic = this.$.baseTopic; // Get <ros-topic>
        if (this.baseCommand) {
          // The timer should not be set at this point, but clear it just in case
          clearInterval(this.baseCommand);
        }
        this.baseCommand = setInterval(function() {
          baseTopic.publish({
            linear: {
              x: 0.1, // Set positive or negative meters/s to drive
              y: 0,
              z: 0
            },
            angular: {
              x: 0,
              y: 0,
              z: 0 // Set rads/s to turn
            }
          });
        }, 10); // Run this function every 10ms, or approximately 100 times per second.
      }

      _startLeft(evt) {
        evt.preventDefault(); // Prevent right-click menu from showing up after long press on mobile
        this.status = 'Driving Left...';
        var baseTopic = this.$.baseTopic; // Get <ros-topic>
        if (this.baseCommand) {
          // The timer should not be set at this point, but clear it just in case
          clearInterval(this.baseCommand);
        }
        this.baseCommand = setInterval(function() {
          baseTopic.publish({
            linear: {
              x: 0, // Set positive or negative meters/s to drive
              y: 0,
              z: 0
            },
            angular: {
              x: 0,
              y: 0,
              z: 0.3 // Set rads/s to turn
            }
          });
        }, 10); // Run this function every 10ms, or approximately 100 times per second.
      }

      _startRight(evt) {
        evt.preventDefault(); // Prevent right-click menu from showing up after long press on mobile
        this.status = 'Driving Left...';
        var baseTopic = this.$.baseTopic; // Get <ros-topic>
        if (this.baseCommand) {
          // The timer should not be set at this point, but clear it just in case
          clearInterval(this.baseCommand);
        }
        this.baseCommand = setInterval(function() {
          baseTopic.publish({
            linear: {
              x: 0, // Set positive or negative meters/s to drive
              y: 0,
              z: 0
            },
            angular: {
              x: 0,
              y: 0,
              z: -0.3 // Set rads/s to turn
            }
          });
        }, 10); // Run this function every 10ms, or approximately 100 times per second.
      }

      _startBack(evt) {
        evt.preventDefault(); // Prevent right-click menu from showing up after long press on mobile
        this.status = 'Driving Left...';
        var baseTopic = this.$.baseTopic; // Get <ros-topic>
        if (this.baseCommand) {
          // The timer should not be set at this point, but clear it just in case
          clearInterval(this.baseCommand);
        }
        this.baseCommand = setInterval(function() {
          baseTopic.publish({
            linear: {
              x: -0.1, // Set positive or negative meters/s to drive
              y: 0,
              z: 0
            },
            angular: {
              x: 0,
              y: 0,
              z: 0 // Set rads/s to turn
            }
          });
        }, 10); // Run this function every 10ms, or approximately 100 times per second.
      }

      _endBaseCommand(evt) {
        this.status = 'Stopped driving.';
        clearInterval(this.baseCommand);
      }

      _setHead() {
        this.status = 'Setting head tilt to ' + this.desiredHeadTilt + ' and setting head pan to ' + this.desiredHeadPan + '...';
        this.$.headService.call({tilt: this.desiredHeadTilt, pan: this.desiredHeadPan});
      }
      _handleHeadSuccess() {
        this.status = 'Set head tilt to ' + this.desiredHeadTilt + ' and set head pan to ' + this.desiredHeadPan;
      }

      _setOpen() {
        this.status = 'Opening the gripper...';
        this.$.gripperService.call({state: "open"});
      }

      _setClose() {
        this.status = 'Closing the gripper...';
        this.$.gripperService.call({state: "close"});
      }
      _handleGripperSuccess() {
        this.status = 'Open/Close the gripper successfully.';
      }

      _setArmJoints() {
        this.status = 'Setting joints to ' + this.desiredShoulderPan + ' degrees, ' + this.desiredShoulderLift + 
		      ' degrees, ' + this.desiredUpperarmRoll + ' degrees, ' + this.desiredElbowFlex + 
		      ' degrees, ' + this.desiredForearmRoll + ' degrees, ' + this.desiredWristFlex + 
                      ' degrees, ' + this.desiredWristRoll + '...';
	let val = {joints: [this.desiredShoulderPan, this.desiredShoulderLift, this.desiredUpperarmRoll,
                                         this.desiredElbowFlex, this.desiredForearmRoll, this.desiredWristFlex,
                                         this.desiredWristRoll]};
	console.log(val);
        this.$.armService.call(val);
      }
      _handleArmSuccess() {
        this.status = 'Set joints to ' + this.desiredShoulderPan + ' degrees, ' + this.desiredShoulderLift + 
	      ' degrees, ' + this.desiredUpperarmRoll + ' degrees ' + this.desiredElbowFlex + 
	      ' degrees ' + this.desiredForearmRoll + ' degrees ' + this.desiredWristFlex + 
              ' degrees ' + this.desiredWristRoll;
      }

      ready() {
        super.ready();
        this.hostname = window.location.hostname;
      }
    }
    window.customElements.define(WebTeleopApp.is, WebTeleopApp);
  </script>
</dom-module>
